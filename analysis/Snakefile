import random
import colorsys
import itertools

# TODO: add a processing rule for "variants_w_splicesm_spliceai"?

combine_tables = "combine_tables.R"
join_groups = "join_groups.R"
values_to_quantile_bins = "values_to_quantile_bins.R"
calculate_caps = "calculate_caps.R"
viz_scores = "viz_scores2.R"

# CAPS files ##################################################################
# Synonymous variants with 4 missing contexts added
syn_by_context_p4 = "../../CAPS/model/phat.tsv"
syn_by_context_p4_genomes = "../../CAPS/model/phat_genomes.tsv"
###############################################################################

if config["gcp"] == False:
    # Variants of interest annotated with splicing scores (one or many)
    splicing_groups = "../files/SpliceSM_bins.tsv"
    # All variants annotated with different versions of SpliceSM and SpliceAI scores
    variants_w_splicesm_spliceai = "../files/variants_w_splicesm_spliceai.tsv.bgz"
    # Variants from genomes annotated with different versions of SpliceSM and SpliceAI scores
    variants_w_splicesm_spliceai_genomes = (
        "../files/variants_w_splicesm_spliceai_genomes.tsv.bgz"
    )
else:
    from snakemake.remote.GS import RemoteProvider

    GS = RemoteProvider()
    # Variants of interest annotated with splicing scores (one or many)
    splicing_groups = GS.remote(config["gcp_rootdir"] + "SpliceSM_bins.tsv")
    # All variants annotated with different versions of SpliceSM and SpliceAI scores
    variants_w_splicesm_spliceai = GS.remote(
        config["gcp_rootdir"] + "variants_w_splicesm_spliceai.tsv.bgz"
    )
    # Variants from genomes annotated with different versions of SpliceSM and SpliceAI scores
    variants_w_splicesm_spliceai_genomes = GS.remote(
        config["gcp_rootdir"] + "variants_w_splicesm_spliceai_genomes.tsv.bgz"
    )

# Parameters ##################################################################

scores_for_viz = [
    "sai_max",
    "sai_sum",
    "sai_xgb",
    "ssm_prev",
    "ssm_new0",
    "ssm_new1",
]

n = len(scores_for_viz)
HSV_tuples = [(x * 1.0 / n, 0.5, 0.5) for x in range(n)]
RGB_tuples = list(
    map(lambda x: tuple(int(i * 255) for i in colorsys.hsv_to_rgb(*x)), HSV_tuples)
)
scores_for_viz_colors = ["#%02x%02x%02x" % rgb for rgb in RGB_tuples]

exponential_quantiles = [
    0.000000,
    0.500000,
    0.750000,
    0.875000,
    0.937500,
    0.968750,
    0.984375,
    0.992188,
    0.996094,
    0.998047,
    0.999023,
    0.999512,
    0.999756,
    0.999878,
    0.999939,
    0.999969,
]
exponential_bins = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
exponential_quantiles_labels = exponential_bins

# Output files ################################################################
variants_w_splicesm_spliceai_exp_tops_scores = (
    "variants_w_splicesm_spliceai_exp_tops_scores.tsv"
)

variants_w_splicesm_spliceai_exp_bins = "variants_w_splicesm_spliceai_exp_bins.tsv"

variants_w_splicesm_spliceai_genomes_exp_tops_scores = (
    "variants_w_splicesm_spliceai_genomes_exp_tops_scores.tsv"
)

variants_w_splicesm_spliceai_genomes_exp_bins = (
    "variants_w_splicesm_spliceai_genomes_exp_bins.tsv"
)
all_models_plot = "all_models.pdf"
all_models_plot_genomes = "all_models_genomes.pdf"

###############################################################################


rule all:
    input:
        all_models_plot,


###############################################################################

# Exomes ######################################################################

for score in scores_for_viz:

    rule quantiles_to_top_groups:
        name:
            "quantiles_to_top_groups_{score}"
        input:
            groups=variants_w_splicesm_spliceai_exp_bins,
        output:
            joined_groups="variants_w_splicesm_spliceai_exp_tops_{score}.tsv",
        params:
            variable="{score}",
        script:
            join_groups

    rule scores_for_top_groups:
        name:
            "top_groups_{score}"
        input:
            variants="variants_w_splicesm_spliceai_exp_tops_{score}.tsv",
            exp_variants=syn_by_context_p4,
        output:
            scores="top_groups_{score}.tsv",
        params:
            phat_method="Var",
            confint_method="CAPS",
            variable="{score}",
        script:
            calculate_caps


rule combine_scores_for_exponential_bins:
    input:
        In=expand(
            "top_groups_{score}.tsv",
            score=scores_for_viz,
        ),
    output:
        Out=variants_w_splicesm_spliceai_exp_tops_scores,
    script:
        combine_tables


rule score_values_to_exponential_bins:
    input:
        In=variants_w_splicesm_spliceai,
    output:
        Out=variants_w_splicesm_spliceai_exp_bins,
    params:
        quantiles=exponential_quantiles,
        scores_to_include=scores_for_viz,
        # When "True", assume that the input file contains variants
        # rather than aggregated groups, has "context" and "alleles"
        # columns and doesn't have the counts columns
        variants_input=True,
    script:
        values_to_quantile_bins


rule visualise_scores_exponential_bins_all_models:
    input:
        scores=variants_w_splicesm_spliceai_exp_tops_scores,
    output:
        plot=all_models_plot,
    params:
        point_alpha=0.5,
        dodge_width=0,
        add_lines=True,
        legend_position="right",
        point_size=1,
        text_size=16,
        xlab_size=16,
        color_labels=scores_for_viz,
        new_color_labels=scores_for_viz,
        xlab_labels=exponential_bins,
        new_xlab_labels=exponential_quantiles_labels,
        xlim_breaks=exponential_quantiles_labels,
        score_name="caps",
        lconf="caps_lconf",
        uconf="caps_uconf",
        xlab="Top group",
        legend_title="",
        colors=scores_for_viz_colors,
        aspect_ratio=2,
        xlab_angle=30,
        xlab_vjust=0.5,
        xlab_hjust=0.5,
        reorder_xlab_by_score=False,
    script:
        viz_scores


# Genomes #####################################################################

for score in scores_for_viz:

    rule quantiles_to_top_groups_genomes:
        name:
            "quantiles_to_top_groups_genomes_{score}"
        input:
            groups=variants_w_splicesm_spliceai_genomes_exp_bins,
        output:
            joined_groups="variants_w_splicesm_spliceai_genomes_exp_tops_{score}.tsv",
        params:
            variable="{score}",
        script:
            join_groups

    rule scores_for_top_groups_genomes:
        name:
            "genomes_top_groups_{score}"
        input:
            variants="variants_w_splicesm_spliceai_genomes_exp_tops_{score}.tsv",
            exp_variants=syn_by_context_p4_genomes,
        output:
            scores="genomes_top_groups_{score}.tsv",
        params:
            phat_method="Var",
            confint_method="CAPS",
            variable="{score}",
        script:
            calculate_caps


rule combine_scores_for_exponential_bins_genomes:
    input:
        In=expand(
            "genomes_top_groups_{score}.tsv",
            score=scores_for_viz,
        ),
    output:
        Out=variants_w_splicesm_spliceai_genomes_exp_tops_scores,
    script:
        combine_tables


rule visualise_scores_exponential_bins_all_models_genomes:
    input:
        scores=variants_w_splicesm_spliceai_genomes_exp_tops_scores,
    output:
        plot=all_models_plot_genomes,
    params:
        point_alpha=0.5,
        dodge_width=0,
        add_lines=True,
        legend_position="right",
        point_size=1,
        text_size=16,
        xlab_size=16,
        color_labels=scores_for_viz,
        new_color_labels=scores_for_viz,
        xlab_labels=exponential_bins,
        new_xlab_labels=exponential_quantiles_labels,
        xlim_breaks=exponential_quantiles_labels[0:10],
        score_name="caps",
        lconf="caps_lconf",
        uconf="caps_uconf",
        xlab="Top group",
        legend_title="",
        colors=scores_for_viz_colors,
        aspect_ratio=2,
        xlab_angle=30,
        xlab_vjust=0.5,
        xlab_hjust=0.5,
        reorder_xlab_by_score=False,
    script:
        viz_scores

from snakemake.remote.GS import RemoteProvider

GS = RemoteProvider(stay_on_remote=True)

variants_by_splicesm_bins = GS.remote(config["gcp_rootdir"] + "SpliceSM_bins.tsv")

# List of variants annotated with SpliceSM scores from different
# models. Columns have to be "chr", "start", "ref", "alt" plus the
# scores.
splicesm_scores = GS.remote(config["gcp_rootdir"] + "prediction_scores_v1.txt")

# TODO: the original file prediction_scores_v1.txt had a problem with the first row/header and "chrN" instead of "N" -- add a rule with preprocessing


rule all:
    input:
        variants_by_splicesm_bins,


rule annotate_exome_variants_w_splicesm:
    input:
        splicesm_scores,
    output:
        variants_by_splicesm_bins,
    params:
        # TODO: consider automating this by extracting values with AWK and calculating the quantiles with R
        # 100%, 50%, 75%, 87.5%, 93.8%, 96.9%, 98.4%, 99.2%, 99.6%, 99.8%
        spliceAI_max_bins=[0.00, 0.00, 0.01, 0.05, 0.13, 0.30, 0.72, 0.97, 0.99, 1.00],
        spliceAI_xgb_bins=[0.08, 0.08, 0.21, 0.41, 0.59, 0.87, 0.96, 0.98, 0.99, 0.99],
        spliceSM_bins=[0.00, 0.14, 0.75, 0.96, 0.99, 1.00, 1.00, 1.00, 1.00, 1.00],
    run:
        import hail as hl
        from misc import preprocessing, annotate_bins

        # Import SpliceSM scores
        splicesm = (
            hl.import_table(
                input[0],
                delimiter="\t",
                missing="",
                # TODO: this is ad-hoc, make this work for a more
                # general case of [1,N] scores
                types={
                    "spliceAI_max": hl.tfloat64,
                    "spliceAI_xgb": hl.tfloat64,
                    "spliceSM": hl.tfloat64,
                    "start": hl.tint32,
                },
            )
            # TODO: this is ad-hoc, make this work for a more general
            # case of [1,N] scores
            .select(
                "chr", "start", "ref", "alt", "spliceAI_max", "spliceAI_xgb", "spliceSM"
            )
        )

        # Index the variants for which SpliceSM scores are available
        # to match the keys of Hail tables
        splicesm = splicesm.key_by(
            locus=hl.locus(splicesm.chr, splicesm.start, reference_genome="GRCh37"),
            alleles=[splicesm.ref, splicesm.alt],
        )

        # Load all variants from gnomAD exomes and perform QC and annotations
        # TODO: note that no filtering based on "most_severe_consequence" is done here!
        exomes = preprocessing(
            config["exomes_ht_path"],
            config["context_ht_path"],
            config["mutation_rates_ht_path"],
            {"female": config["female"], "male": config["male"]},
        )

        # Annotate the variants with SpliceSM scores
        # TODO: this is ad-hoc, make this work for a more general case
        # of [1,N] scores
        splicesm = splicesm[exomes.key]
        exomes = exomes.annotate(
            spliceAI_xgb=splicesm.spliceAI_xgb,
            spliceAI_max=splicesm.spliceAI_max,
            spliceSM=splicesm.spliceSM,
        )

        exomes = annotate_bins(exomes, "spliceAI_max", params[0]).rename(
            {"variable_bin": "spliceAI_max_bin"}
        )
        exomes = annotate_bins(exomes, "spliceAI_xgb", params[1]).rename(
            {"variable_bin": "spliceAI_xgb_bin"}
        )
        exomes = annotate_bins(exomes, "spliceSM", params[2]).rename(
            {"variable_bin": "spliceSM_bin"}
        )

        exomes.group_by(
            "context",
            "ref",
            "alt",
            "methylation_level",
            "mu",
            "spliceAI_max_bin",
            "spliceAI_xgb_bin",
            "spliceSM_bin",
        ).aggregate(
            variant_count=hl.agg.count(),
            singleton_count=hl.agg.count_where(exomes.freq[0].AC == 1),
        ).export(
            output[0]
        )
